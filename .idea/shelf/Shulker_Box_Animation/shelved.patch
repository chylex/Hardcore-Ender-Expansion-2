Index: src/main/java/chylex/hee/game/block/entity/TileEntityShulkerBoxCustom.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package chylex.hee.game.block.entity\r\nimport chylex.hee.game.block.BlockShulkerBoxOverride.BoxSize\r\nimport chylex.hee.game.container.ContainerShulkerBox\r\nimport chylex.hee.init.ModTileEntities\r\nimport chylex.hee.system.migration.vanilla.TextComponentTranslation\r\nimport chylex.hee.system.migration.vanilla.TileEntityShulkerBox\r\nimport chylex.hee.system.util.delegate.NotifyOnChange\r\nimport chylex.hee.system.util.getEnum\r\nimport chylex.hee.system.util.heeTag\r\nimport chylex.hee.system.util.heeTagOrNull\r\nimport chylex.hee.system.util.putEnum\r\nimport net.minecraft.entity.player.PlayerInventory\r\nimport net.minecraft.inventory.container.Container\r\nimport net.minecraft.item.ItemStack\r\nimport net.minecraft.nbt.CompoundNBT\r\nimport net.minecraft.tileentity.TileEntityType\r\nimport net.minecraft.util.Direction\r\nimport net.minecraft.util.NonNullList\r\nimport net.minecraft.util.text.ITextComponent\r\n\r\nclass TileEntityShulkerBoxCustom : TileEntityShulkerBox(){\r\n\tcompanion object{\r\n\t\tconst val BOX_SIZE_TAG = \"BoxSize\"\r\n\t}\r\n\t\r\n\tvar boxSize by NotifyOnChange(BoxSize.LARGE){ newValue ->\r\n\t\tval newItems = NonNullList.withSize(newValue.slots, ItemStack.EMPTY)\r\n\t\t\r\n\t\tfor(slot in 0 until newValue.slots){\r\n\t\t\tnewItems[slot] = items[slot]\r\n\t\t}\r\n\t\t\r\n\t\titems = newItems\r\n\t}\r\n\t\r\n\toverride fun getType(): TileEntityType<*>{\r\n\t\treturn ModTileEntities.SHULKER_BOX\r\n\t}\r\n\t\r\n\toverride fun getDefaultName(): ITextComponent{\r\n\t\treturn TextComponentTranslation(boxSize.translationKey)\r\n\t}\r\n\t\r\n\toverride fun getSlotsForFace(side: Direction): IntArray{\r\n\t\treturn boxSize.slotIndices\r\n\t}\r\n\t\r\n\toverride fun createMenu(id: Int, inventory: PlayerInventory): Container{\r\n\t\treturn ContainerShulkerBox(id, inventory, this)\r\n\t}\r\n\t\r\n\toverride fun saveToNbt(nbt: CompoundNBT): CompoundNBT{\r\n\t\treturn super.saveToNbt(nbt).also {\r\n\t\t\tit.heeTag.putEnum(BOX_SIZE_TAG, boxSize)\r\n\t\t}\r\n\t}\r\n\t\r\n\toverride fun loadFromNbt(nbt: CompoundNBT){\r\n\t\tsuper.loadFromNbt(nbt)\r\n\t\tboxSize = nbt.heeTagOrNull?.getEnum<BoxSize>(BOX_SIZE_TAG) ?: boxSize\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/chylex/hee/game/block/entity/TileEntityShulkerBoxCustom.kt	(revision dc6be9f9dc3746b81524e00124222d742935d811)
+++ src/main/java/chylex/hee/game/block/entity/TileEntityShulkerBoxCustom.kt	(date 1590244732890)
@@ -2,15 +2,19 @@
 import chylex.hee.game.block.BlockShulkerBoxOverride.BoxSize
 import chylex.hee.game.container.ContainerShulkerBox
 import chylex.hee.init.ModTileEntities
+import chylex.hee.system.migration.forge.Side
+import chylex.hee.system.migration.forge.Sided
 import chylex.hee.system.migration.vanilla.TextComponentTranslation
 import chylex.hee.system.migration.vanilla.TileEntityShulkerBox
 import chylex.hee.system.util.delegate.NotifyOnChange
 import chylex.hee.system.util.getEnum
 import chylex.hee.system.util.heeTag
 import chylex.hee.system.util.heeTagOrNull
+import chylex.hee.system.util.math.LerpedFloat
 import chylex.hee.system.util.putEnum
 import net.minecraft.entity.player.PlayerInventory
 import net.minecraft.inventory.container.Container
+import net.minecraft.item.DyeColor
 import net.minecraft.item.ItemStack
 import net.minecraft.nbt.CompoundNBT
 import net.minecraft.tileentity.TileEntityType
@@ -18,7 +22,7 @@
 import net.minecraft.util.NonNullList
 import net.minecraft.util.text.ITextComponent
 
-class TileEntityShulkerBoxCustom : TileEntityShulkerBox(){
+open class TileEntityShulkerBoxCustom : TileEntityShulkerBox(){
 	companion object{
 		const val BOX_SIZE_TAG = "BoxSize"
 	}
@@ -59,4 +63,18 @@
 		super.loadFromNbt(nbt)
 		boxSize = nbt.heeTagOrNull?.getEnum<BoxSize>(BOX_SIZE_TAG) ?: boxSize
 	}
+	
+	class ForRendering : TileEntityShulkerBoxCustom(){
+		var color2: DyeColor? = null
+		val animation = LerpedFloat(0F)
+		
+		override fun getProgress(partialTicks: Float): Float{
+			return animation.get(partialTicks)
+		}
+		
+		@Sided(Side.CLIENT)
+		override fun getColor(): DyeColor?{
+			return color2
+		}
+	}
 }
Index: src/main/java/chylex/hee/client/render/block/RenderTileShulkerBoxInHand.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/chylex/hee/client/render/block/RenderTileShulkerBoxInHand.kt	(date 1590248086232)
+++ src/main/java/chylex/hee/client/render/block/RenderTileShulkerBoxInHand.kt	(date 1590248086232)
@@ -0,0 +1,27 @@
+package chylex.hee.client.render.block
+import chylex.hee.game.block.entity.TileEntityShulkerBoxCustom
+import chylex.hee.game.item.ItemShulkerBoxOverride
+import chylex.hee.system.migration.forge.Side
+import chylex.hee.system.migration.forge.Sided
+import chylex.hee.system.migration.vanilla.BlockShulkerBox
+import net.minecraft.client.renderer.tileentity.ItemStackTileEntityRenderer
+import net.minecraft.client.renderer.tileentity.TileEntityRendererDispatcher
+import net.minecraft.item.ItemStack
+
+@Sided(Side.CLIENT)
+object RenderTileShulkerBoxInHand : ItemStackTileEntityRenderer(){
+	private val tile = TileEntityShulkerBoxCustom.ForRendering()
+	
+	override fun renderByItem(stack: ItemStack){
+		val item = stack.item as? ItemShulkerBoxOverride
+		val color = item?.let { BlockShulkerBox.getColorFromItem(it) }
+		val anim = ItemShulkerBoxOverride.getAnimationProgress(stack)
+		
+		if (anim > 0F){
+			TileEntityRendererDispatcher.instance.renderAsItem(TileEntityShulkerBoxCustom.ForRendering().also { it.color2 = color; it.animation.updateImmediately(anim) })
+		}
+		else{
+			TileEntityRendererDispatcher.instance.renderAsItem(tile.also { it.color2 = color })
+		}
+	}
+}
Index: src/main/java/chylex/hee/game/container/ContainerShulkerBoxInInventory.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package chylex.hee.game.container\r\nimport chylex.hee.game.container.util.DetectSlotChangeListener\r\nimport chylex.hee.game.item.ItemShulkerBoxOverride\r\nimport chylex.hee.init.ModContainers\r\nimport chylex.hee.system.migration.vanilla.EntityPlayer\r\nimport chylex.hee.system.util.getStack\r\nimport net.minecraft.entity.player.PlayerInventory\r\nimport net.minecraft.network.PacketBuffer\r\n\r\nclass ContainerShulkerBoxInInventory(id: Int, player: EntityPlayer, private val boxInventory: ItemShulkerBoxOverride.Inv) : ContainerShulkerBox(ModContainers.SHULKER_BOX_IN_INVENTORY, id, player, boxInventory){\r\n\t@Suppress(\"unused\")\r\n\tconstructor(id: Int, inventory: PlayerInventory, buffer: PacketBuffer) : this(id, inventory.player, buffer.readVarInt())\r\n\tconstructor(id: Int, player: EntityPlayer, slot: Int) : this(id, player, ItemShulkerBoxOverride.Inv(player, ItemShulkerBoxOverride.getBoxSize(player.inventory.getStack(slot)), slot))\r\n\t\r\n\tprivate val slotChangeListener = DetectSlotChangeListener()\r\n\t\r\n\toverride fun detectAndSendChanges(){\r\n\t\tslotChangeListener.restart(listeners){ super.detectAndSendChanges() }?.let(boxInventory::validatePlayerItemOnModification)\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/chylex/hee/game/container/ContainerShulkerBoxInInventory.kt	(revision dc6be9f9dc3746b81524e00124222d742935d811)
+++ src/main/java/chylex/hee/game/container/ContainerShulkerBoxInInventory.kt	(date 1590247126457)
@@ -12,6 +12,9 @@
 	constructor(id: Int, inventory: PlayerInventory, buffer: PacketBuffer) : this(id, inventory.player, buffer.readVarInt())
 	constructor(id: Int, player: EntityPlayer, slot: Int) : this(id, player, ItemShulkerBoxOverride.Inv(player, ItemShulkerBoxOverride.getBoxSize(player.inventory.getStack(slot)), slot))
 	
+	val slot
+		get() = boxInventory.inventorySlot
+	
 	private val slotChangeListener = DetectSlotChangeListener()
 	
 	override fun detectAndSendChanges(){
Index: src/main/java/chylex/hee/game/item/ItemShulkerBoxOverride.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package chylex.hee.game.item\r\nimport chylex.hee.HEE\r\nimport chylex.hee.client.util.MC\r\nimport chylex.hee.game.block.BlockShulkerBoxOverride.BoxSize\r\nimport chylex.hee.game.block.entity.TileEntityShulkerBoxCustom\r\nimport chylex.hee.game.container.ContainerShulkerBoxInInventory\r\nimport chylex.hee.game.container.base.IInventoryFromPlayerItem\r\nimport chylex.hee.init.ModContainers\r\nimport chylex.hee.network.server.PacketServerOpenInventoryItem\r\nimport chylex.hee.system.migration.ActionResult.PASS\r\nimport chylex.hee.system.migration.ActionResult.SUCCESS\r\nimport chylex.hee.system.migration.MagicValues\r\nimport chylex.hee.system.migration.forge.EventPriority\r\nimport chylex.hee.system.migration.forge.Side\r\nimport chylex.hee.system.migration.forge.Sided\r\nimport chylex.hee.system.migration.forge.SubscribeAllEvents\r\nimport chylex.hee.system.migration.forge.SubscribeEvent\r\nimport chylex.hee.system.migration.vanilla.EntityPlayer\r\nimport chylex.hee.system.migration.vanilla.ItemBlock\r\nimport chylex.hee.system.migration.vanilla.TextComponentString\r\nimport chylex.hee.system.migration.vanilla.TextComponentTranslation\r\nimport chylex.hee.system.util.allSlots\r\nimport chylex.hee.system.util.facades.Stats\r\nimport chylex.hee.system.util.find\r\nimport chylex.hee.system.util.getCompoundOrNull\r\nimport chylex.hee.system.util.getEnum\r\nimport chylex.hee.system.util.getOrCreateCompound\r\nimport chylex.hee.system.util.getStack\r\nimport chylex.hee.system.util.heeTag\r\nimport chylex.hee.system.util.heeTagOrNull\r\nimport chylex.hee.system.util.isNotEmpty\r\nimport chylex.hee.system.util.nbt\r\nimport chylex.hee.system.util.nbtOrNull\r\nimport chylex.hee.system.util.nonEmptySlots\r\nimport chylex.hee.system.util.putEnum\r\nimport chylex.hee.system.util.setStack\r\nimport chylex.hee.system.util.size\r\nimport it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap\r\nimport net.minecraft.block.Block\r\nimport net.minecraft.client.gui.screen.Screen\r\nimport net.minecraft.client.gui.screen.inventory.InventoryScreen\r\nimport net.minecraft.client.util.ITooltipFlag\r\nimport net.minecraft.entity.player.PlayerInventory\r\nimport net.minecraft.inventory.Inventory\r\nimport net.minecraft.inventory.ItemStackHelper\r\nimport net.minecraft.inventory.container.Container\r\nimport net.minecraft.inventory.container.INamedContainerProvider\r\nimport net.minecraft.item.ItemGroup\r\nimport net.minecraft.item.ItemStack\r\nimport net.minecraft.util.ActionResult\r\nimport net.minecraft.util.Hand\r\nimport net.minecraft.util.NonNullList\r\nimport net.minecraft.util.text.ITextComponent\r\nimport net.minecraft.util.text.TextFormatting.GRAY\r\nimport net.minecraft.util.text.TextFormatting.ITALIC\r\nimport net.minecraft.world.World\r\nimport net.minecraftforge.client.event.GuiScreenEvent\r\n\r\nclass ItemShulkerBoxOverride(block: Block, properties: Properties) : ItemBlock(block, properties){\r\n\tcompanion object{\r\n\t\tprivate const val TOOLTIP_ENTRY_COUNT = 5\r\n\t\t\r\n\t\tprivate fun isStackValid(stack: ItemStack): Boolean{\r\n\t\t\treturn stack.item is ItemShulkerBoxOverride\r\n\t\t}\r\n\t\t\r\n\t\tfun getBoxSize(stack: ItemStack): BoxSize{\r\n\t\t\treturn stack.nbtOrNull\r\n\t\t\t\t?.getCompoundOrNull(MagicValues.TILE_ENTITY_TAG)\r\n\t\t\t\t?.heeTagOrNull\r\n\t\t\t\t?.getEnum<BoxSize>(TileEntityShulkerBoxCustom.BOX_SIZE_TAG)\r\n\t\t\t\t?: BoxSize.LARGE\r\n\t\t}\r\n\t\t\r\n\t\tfun setBoxSize(stack: ItemStack, boxSize: BoxSize){\r\n\t\t\tstack.nbt.getOrCreateCompound(MagicValues.TILE_ENTITY_TAG).heeTag.putEnum(TileEntityShulkerBoxCustom.BOX_SIZE_TAG, boxSize)\r\n\t\t}\r\n\t}\r\n\t\r\n\tclass ContainerProvider(private val stack: ItemStack, private val slot: Int) : INamedContainerProvider{\r\n\t\toverride fun getDisplayName(): ITextComponent{\r\n\t\t\treturn stack.displayName\r\n\t\t}\r\n\t\t\r\n\t\toverride fun createMenu(id: Int, inventory: PlayerInventory, player: EntityPlayer): Container{\r\n\t\t\treturn ContainerShulkerBoxInInventory(id, player, slot)\r\n\t\t}\r\n\t}\r\n\t\r\n\tclass Inv(override val player: EntityPlayer, boxSize: BoxSize, private val inventorySlot: Int) : Inventory(boxSize.slots), IInventoryFromPlayerItem{\r\n\t\tprivate val boxStack\r\n\t\t\tget() = player.inventory.getStack(inventorySlot)\r\n\t\t\r\n\t\tinit{\r\n\t\t\tval boxStack = boxStack\r\n\t\t\t\r\n\t\t\tif (isStackValid(boxStack)){\r\n\t\t\t\tNonNullList.withSize(size, ItemStack.EMPTY).also {\r\n\t\t\t\t\tItemStackHelper.loadAllItems(boxStack.nbt.getCompound(MagicValues.TILE_ENTITY_TAG), it)\r\n\t\t\t\t\tit.forEachIndexed(::setStack)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\toverride fun tryUpdatePlayerItem(): Boolean{\r\n\t\t\tval boxStack = boxStack\r\n\t\t\t\r\n\t\t\tif (!isStackValid(boxStack)){\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tNonNullList.withSize(size, ItemStack.EMPTY).also {\r\n\t\t\t\tfor((slot, stack) in allSlots){\r\n\t\t\t\t\tit[slot] = stack\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tItemStackHelper.saveAllItems(boxStack.nbt.getOrCreateCompound(MagicValues.TILE_ENTITY_TAG), it)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Properties\r\n\t\r\n\toverride fun getTranslationKey(stack: ItemStack): String{\r\n\t\treturn getBoxSize(stack).translationKey\r\n\t}\r\n\t\r\n\toverride fun fillItemGroup(group: ItemGroup, items: NonNullList<ItemStack>){\r\n\t\tif (isInGroup(group)){\r\n\t\t\tfor(boxSize in BoxSize.values()){\r\n\t\t\t\titems.add(ItemStack(this).also { setBoxSize(it, boxSize) })\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Use handling\r\n\t\r\n\toverride fun onItemRightClick(world: World, player: EntityPlayer, hand: Hand): ActionResult<ItemStack>{\r\n\t\tval stack = player.getHeldItem(hand)\r\n\t\tval slot = player.inventory.nonEmptySlots.find { it.stack === stack }\r\n\t\t\r\n\t\tif (slot == null){\r\n\t\t\treturn ActionResult(PASS, stack)\r\n\t\t}\r\n\t\t\r\n\t\tModContainers.open(player, ContainerProvider(stack, slot.slot), slot.slot) // TODO it'd be pretty funny if the open animation was shown in inventory/held model but holy shit effort\r\n\t\tplayer.addStat(Stats.OPEN_SHULKER_BOX)\r\n\t\t\r\n\t\treturn ActionResult(SUCCESS, stack)\r\n\t}\r\n\t\r\n\t// Client side\r\n\t\r\n\t@Sided(Side.CLIENT)\r\n\t@SubscribeAllEvents(Side.CLIENT, modid = HEE.ID)\r\n\tobject EventHandler{\r\n\t\t@SubscribeEvent(EventPriority.LOWEST)\r\n\t\tfun onMouseInputPre(e: GuiScreenEvent.MouseClickedEvent.Pre){\r\n\t\t\tval gui = e.gui\r\n\t\t\t\r\n\t\t\tif (gui is InventoryScreen && e.button == 1 && !Screen.hasShiftDown()){\r\n\t\t\t\tval hoveredSlot = gui.slotUnderMouse\r\n\t\t\t\t\r\n\t\t\t\tif (hoveredSlot != null && isStackValid(hoveredSlot.stack)){\r\n\t\t\t\t\tPacketServerOpenInventoryItem(hoveredSlot.slotIndex).sendToServer()\r\n\t\t\t\t\te.isCanceled = true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\toverride fun shouldCauseReequipAnimation(oldStack: ItemStack, newStack: ItemStack, slotChanged: Boolean): Boolean{\r\n\t\treturn slotChanged && super.shouldCauseReequipAnimation(oldStack, newStack, slotChanged)\r\n\t}\r\n\t\r\n\t@Sided(Side.CLIENT)\r\n\toverride fun addInformation(stack: ItemStack, world: World?, lines: MutableList<ITextComponent>, flags: ITooltipFlag){\r\n\t\tif (MC.currentScreen is InventoryScreen){\r\n\t\t\tlines.add(TextComponentTranslation(\"item.hee.shulker_box.tooltip\"))\r\n\t\t\tlines.add(TextComponentString(\"\"))\r\n\t\t}\r\n\t\t\r\n\t\tval contentsTag = stack.nbtOrNull?.getCompoundOrNull(MagicValues.TILE_ENTITY_TAG)\r\n\t\t\r\n\t\tif (contentsTag != null){\r\n\t\t\tval inventory = NonNullList.withSize(BoxSize.LARGE.slots, ItemStack.EMPTY)\r\n\t\t\tItemStackHelper.loadAllItems(contentsTag, inventory)\r\n\t\t\t\r\n\t\t\tif (inventory.any { it.isNotEmpty }){\r\n\t\t\t\tval counts = Object2IntOpenHashMap<String>()\r\n\t\t\t\t\r\n\t\t\t\tfor(invStack in inventory){\r\n\t\t\t\t\tif (invStack.isNotEmpty){\r\n\t\t\t\t\t\tcounts.addTo(invStack.displayName.string, invStack.count)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tval sorted = counts.object2IntEntrySet().sortedWith(compareBy({ -it.intValue }, { it.key }))\r\n\t\t\t\t\r\n\t\t\t\tfor((name, count) in sorted.take(TOOLTIP_ENTRY_COUNT)){\r\n\t\t\t\t\tlines.add(TextComponentString(\"%s x%d\".format(name, count)).applyTextStyle(GRAY))\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (sorted.size > TOOLTIP_ENTRY_COUNT){\r\n\t\t\t\t\tlines.add(TextComponentTranslation(\"container.shulkerBox.more\", sorted.size - TOOLTIP_ENTRY_COUNT).applyTextStyles(GRAY, ITALIC))\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif ((lines.lastOrNull() as? TextComponentString)?.let { it.text.isEmpty() && it.siblings.isEmpty() } == true){\r\n\t\t\tlines.removeAt(lines.lastIndex)\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/chylex/hee/game/item/ItemShulkerBoxOverride.kt	(revision dc6be9f9dc3746b81524e00124222d742935d811)
+++ src/main/java/chylex/hee/game/item/ItemShulkerBoxOverride.kt	(date 1590247139233)
@@ -40,6 +40,7 @@
 import net.minecraft.client.gui.screen.Screen
 import net.minecraft.client.gui.screen.inventory.InventoryScreen
 import net.minecraft.client.util.ITooltipFlag
+import net.minecraft.entity.Entity
 import net.minecraft.entity.player.PlayerInventory
 import net.minecraft.inventory.Inventory
 import net.minecraft.inventory.ItemStackHelper
@@ -58,6 +59,7 @@
 
 class ItemShulkerBoxOverride(block: Block, properties: Properties) : ItemBlock(block, properties){
 	companion object{
+		private const val ANIMATION_TAG = "Anim"
 		private const val TOOLTIP_ENTRY_COUNT = 5
 		
 		private fun isStackValid(stack: ItemStack): Boolean{
@@ -75,6 +77,19 @@
 		fun setBoxSize(stack: ItemStack, boxSize: BoxSize){
 			stack.nbt.getOrCreateCompound(MagicValues.TILE_ENTITY_TAG).heeTag.putEnum(TileEntityShulkerBoxCustom.BOX_SIZE_TAG, boxSize)
 		}
+		
+		fun getAnimationProgress(stack: ItemStack): Float{
+			return stack.heeTagOrNull?.getFloat(ANIMATION_TAG) ?: 0F
+		}
+		
+		fun setAnimationProgress(stack: ItemStack, progress: Float){
+			if (progress <= 0F){
+				stack.heeTagOrNull?.remove(ANIMATION_TAG)
+			}
+			else{
+				stack.heeTag.putFloat(ANIMATION_TAG, progress)
+			}
+		}
 	}
 	
 	class ContainerProvider(private val stack: ItemStack, private val slot: Int) : INamedContainerProvider{
@@ -87,7 +102,7 @@
 		}
 	}
 	
-	class Inv(override val player: EntityPlayer, boxSize: BoxSize, private val inventorySlot: Int) : Inventory(boxSize.slots), IInventoryFromPlayerItem{
+	class Inv(override val player: EntityPlayer, boxSize: BoxSize, val inventorySlot: Int) : Inventory(boxSize.slots), IInventoryFromPlayerItem{
 		private val boxStack
 			get() = player.inventory.getStack(inventorySlot)
 		
@@ -137,6 +152,19 @@
 	
 	// Use handling
 	
+	override fun inventoryTick(stack: ItemStack, world: World, entity: Entity, itemSlot: Int, isSelected: Boolean){
+		val anim = getAnimationProgress(stack)
+		
+		if (isSelected){
+			if (anim < 1F && entity is EntityPlayer && (entity.openContainer as? ContainerShulkerBoxInInventory)?.let { it.slot == itemSlot } == true){
+				setAnimationProgress(stack, 1F)
+			}
+		}
+		else if (anim > 0F){
+			setAnimationProgress(stack, 0F)
+		}
+	}
+	
 	override fun onItemRightClick(world: World, player: EntityPlayer, hand: Hand): ActionResult<ItemStack>{
 		val stack = player.getHeldItem(hand)
 		val slot = player.inventory.nonEmptySlots.find { it.stack === stack }
Index: src/main/java/chylex/hee/init/ModBlocks.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package chylex.hee.init\r\nimport chylex.hee.HEE\r\nimport chylex.hee.game.block.BlockAncientCobweb\r\nimport chylex.hee.game.block.BlockBrewingStandCustom\r\nimport chylex.hee.game.block.BlockCauldronWithDragonsBreath\r\nimport chylex.hee.game.block.BlockCauldronWithGoo\r\nimport chylex.hee.game.block.BlockCorruptedEnergy\r\nimport chylex.hee.game.block.BlockDarkChest\r\nimport chylex.hee.game.block.BlockDeathFlowerDecaying\r\nimport chylex.hee.game.block.BlockDragonEggOverride\r\nimport chylex.hee.game.block.BlockDryVines\r\nimport chylex.hee.game.block.BlockDustyStoneBricks\r\nimport chylex.hee.game.block.BlockDustyStoneUnstable\r\nimport chylex.hee.game.block.BlockEndPlant\r\nimport chylex.hee.game.block.BlockEndPortalAcceptor\r\nimport chylex.hee.game.block.BlockEndPortalInner\r\nimport chylex.hee.game.block.BlockEndPortalOverride\r\nimport chylex.hee.game.block.BlockEndPowderOre\r\nimport chylex.hee.game.block.BlockEnderGoo\r\nimport chylex.hee.game.block.BlockEnderGooPurified\r\nimport chylex.hee.game.block.BlockEndersol\r\nimport chylex.hee.game.block.BlockEndium\r\nimport chylex.hee.game.block.BlockEnergyCluster\r\nimport chylex.hee.game.block.BlockEternalFire\r\nimport chylex.hee.game.block.BlockExperienceGateController\r\nimport chylex.hee.game.block.BlockExperienceGateOutline\r\nimport chylex.hee.game.block.BlockFallingObsidian\r\nimport chylex.hee.game.block.BlockFlowerPotCustom\r\nimport chylex.hee.game.block.BlockFlowerPotDeathFlowerDecaying\r\nimport chylex.hee.game.block.BlockGloomrock\r\nimport chylex.hee.game.block.BlockGloomtorch\r\nimport chylex.hee.game.block.BlockGraveDirt\r\nimport chylex.hee.game.block.BlockHumus\r\nimport chylex.hee.game.block.BlockIgneousPlate\r\nimport chylex.hee.game.block.BlockIgneousRockOre\r\nimport chylex.hee.game.block.BlockInfusedGlass\r\nimport chylex.hee.game.block.BlockInfusedTNT\r\nimport chylex.hee.game.block.BlockJarODust\r\nimport chylex.hee.game.block.BlockLootChest\r\nimport chylex.hee.game.block.BlockMinersBurialAltar\r\nimport chylex.hee.game.block.BlockPillarCustom\r\nimport chylex.hee.game.block.BlockPuzzleLogic\r\nimport chylex.hee.game.block.BlockScaffolding\r\nimport chylex.hee.game.block.BlockShulkerBoxOverride\r\nimport chylex.hee.game.block.BlockSimple\r\nimport chylex.hee.game.block.BlockSimpleShaped\r\nimport chylex.hee.game.block.BlockSimpleWithMapColor\r\nimport chylex.hee.game.block.BlockSkullCustom\r\nimport chylex.hee.game.block.BlockSlabCustom\r\nimport chylex.hee.game.block.BlockSpawnerObsidianTowers\r\nimport chylex.hee.game.block.BlockStairsCustom\r\nimport chylex.hee.game.block.BlockStardustOre\r\nimport chylex.hee.game.block.BlockTableBase\r\nimport chylex.hee.game.block.BlockTablePedestal\r\nimport chylex.hee.game.block.BlockTableTile\r\nimport chylex.hee.game.block.BlockVoidPortalCrafted\r\nimport chylex.hee.game.block.BlockVoidPortalInner\r\nimport chylex.hee.game.block.BlockVoidPortalStorage\r\nimport chylex.hee.game.block.BlockVoidPortalStorageCrafted\r\nimport chylex.hee.game.block.BlockWhitebarkLeaves\r\nimport chylex.hee.game.block.BlockWhitebarkLog\r\nimport chylex.hee.game.block.BlockWhitebarkSapling\r\nimport chylex.hee.game.block.entity.TileEntityAccumulationTable\r\nimport chylex.hee.game.block.entity.TileEntityExperienceTable\r\nimport chylex.hee.game.block.entity.TileEntityInfusionTable\r\nimport chylex.hee.game.block.fluid.FluidEnderGoo\r\nimport chylex.hee.game.block.fluid.FluidEnderGooPurified\r\nimport chylex.hee.game.block.info.BlockBuilders.buildAncientCobweb\r\nimport chylex.hee.game.block.info.BlockBuilders.buildBrewingStand\r\nimport chylex.hee.game.block.info.BlockBuilders.buildCauldron\r\nimport chylex.hee.game.block.info.BlockBuilders.buildCorruptedEnergy\r\nimport chylex.hee.game.block.info.BlockBuilders.buildDarkLoam\r\nimport chylex.hee.game.block.info.BlockBuilders.buildDragonEgg\r\nimport chylex.hee.game.block.info.BlockBuilders.buildDryVines\r\nimport chylex.hee.game.block.info.BlockBuilders.buildDustyStone\r\nimport chylex.hee.game.block.info.BlockBuilders.buildDustyStoneBricks\r\nimport chylex.hee.game.block.info.BlockBuilders.buildDustyStoneCracked\r\nimport chylex.hee.game.block.info.BlockBuilders.buildDustyStoneDamaged\r\nimport chylex.hee.game.block.info.BlockBuilders.buildEndPortalOverride\r\nimport chylex.hee.game.block.info.BlockBuilders.buildEndPowderOre\r\nimport chylex.hee.game.block.info.BlockBuilders.buildEndStone\r\nimport chylex.hee.game.block.info.BlockBuilders.buildEnderSol\r\nimport chylex.hee.game.block.info.BlockBuilders.buildEndermanHead\r\nimport chylex.hee.game.block.info.BlockBuilders.buildEndiumBlock\r\nimport chylex.hee.game.block.info.BlockBuilders.buildEndiumOre\r\nimport chylex.hee.game.block.info.BlockBuilders.buildEnergyCluster\r\nimport chylex.hee.game.block.info.BlockBuilders.buildEternalFire\r\nimport chylex.hee.game.block.info.BlockBuilders.buildEtherealLantern\r\nimport chylex.hee.game.block.info.BlockBuilders.buildExperienceGate\r\nimport chylex.hee.game.block.info.BlockBuilders.buildFlowerPot\r\nimport chylex.hee.game.block.info.BlockBuilders.buildGloomrock\r\nimport chylex.hee.game.block.info.BlockBuilders.buildGloomrockBricks\r\nimport chylex.hee.game.block.info.BlockBuilders.buildGloomrockSmooth\r\nimport chylex.hee.game.block.info.BlockBuilders.buildGloomtorch\r\nimport chylex.hee.game.block.info.BlockBuilders.buildGraveDirt\r\nimport chylex.hee.game.block.info.BlockBuilders.buildHumus\r\nimport chylex.hee.game.block.info.BlockBuilders.buildIgneousPlate\r\nimport chylex.hee.game.block.info.BlockBuilders.buildIgneousRockOre\r\nimport chylex.hee.game.block.info.BlockBuilders.buildInfusedGlass\r\nimport chylex.hee.game.block.info.BlockBuilders.buildJarODust\r\nimport chylex.hee.game.block.info.BlockBuilders.buildLootChest\r\nimport chylex.hee.game.block.info.BlockBuilders.buildMinersBurial\r\nimport chylex.hee.game.block.info.BlockBuilders.buildMinersBurialIndestructible\r\nimport chylex.hee.game.block.info.BlockBuilders.buildObsidian\r\nimport chylex.hee.game.block.info.BlockBuilders.buildObsidianVariation\r\nimport chylex.hee.game.block.info.BlockBuilders.buildObsidianVariationLit\r\nimport chylex.hee.game.block.info.BlockBuilders.buildPlant\r\nimport chylex.hee.game.block.info.BlockBuilders.buildPortalFrame\r\nimport chylex.hee.game.block.info.BlockBuilders.buildPortalFrameCrafted\r\nimport chylex.hee.game.block.info.BlockBuilders.buildPortalInner\r\nimport chylex.hee.game.block.info.BlockBuilders.buildPuzzleLogic\r\nimport chylex.hee.game.block.info.BlockBuilders.buildPuzzleWall\r\nimport chylex.hee.game.block.info.BlockBuilders.buildScaffolding\r\nimport chylex.hee.game.block.info.BlockBuilders.buildSpawnerObsidianTowers\r\nimport chylex.hee.game.block.info.BlockBuilders.buildStardustOre\r\nimport chylex.hee.game.block.info.BlockBuilders.buildTable\r\nimport chylex.hee.game.block.info.BlockBuilders.buildTablePedestal\r\nimport chylex.hee.game.block.info.BlockBuilders.buildVantablock\r\nimport chylex.hee.game.block.info.BlockBuilders.buildWhitebark\r\nimport chylex.hee.game.block.info.BlockBuilders.buildWhitebarkLeaves\r\nimport chylex.hee.game.block.info.BlockBuilders.buildWhitebarkPlanks\r\nimport chylex.hee.game.block.info.BlockBuilders.buildWhitebarkSapling\r\nimport chylex.hee.game.block.util.CustomSkulls\r\nimport chylex.hee.game.item.ItemAncientCobweb\r\nimport chylex.hee.game.item.ItemBlockFuel\r\nimport chylex.hee.game.item.ItemDeathFlower\r\nimport chylex.hee.game.item.ItemDragonEgg\r\nimport chylex.hee.game.item.ItemInfusedTNT\r\nimport chylex.hee.game.item.ItemShulkerBoxOverride\r\nimport chylex.hee.game.world.feature.basic.trees.types.AutumnTreeGenerator\r\nimport chylex.hee.init.ModCreativeTabs.OrderedCreativeTab\r\nimport chylex.hee.system.migration.Facing.NORTH\r\nimport chylex.hee.system.migration.Facing.SOUTH\r\nimport chylex.hee.system.migration.forge.SubscribeAllEvents\r\nimport chylex.hee.system.migration.forge.SubscribeEvent\r\nimport chylex.hee.system.migration.vanilla.BlockFire\r\nimport chylex.hee.system.migration.vanilla.BlockWall\r\nimport chylex.hee.system.migration.vanilla.Blocks\r\nimport chylex.hee.system.migration.vanilla.ItemBlock\r\nimport chylex.hee.system.util.facades.Resource\r\nimport chylex.hee.system.util.named\r\nimport chylex.hee.system.util.useVanillaName\r\nimport net.minecraft.block.Block\r\nimport net.minecraft.block.material.MaterialColor\r\nimport net.minecraft.fluid.Fluid\r\nimport net.minecraft.item.Item\r\nimport net.minecraft.item.ItemGroup\r\nimport net.minecraft.util.math.AxisAlignedBB\r\nimport net.minecraftforge.event.RegistryEvent\r\nimport net.minecraftforge.fml.common.Mod.EventBusSubscriber.Bus.MOD\r\nimport java.util.concurrent.Callable\r\n\r\n@SubscribeAllEvents(modid = HEE.ID, bus = MOD)\r\nobject ModBlocks{\r\n\t\r\n\t// Blocks: Building (Uncategorized)\r\n\t\r\n\t@JvmField val ETHEREAL_LANTERN = BlockSimple(buildEtherealLantern) named \"ethereal_lantern\"\r\n\t@JvmField val STONE_BRICK_WALL = BlockWall(Block.Properties.from(Blocks.STONE_BRICKS)) named \"stone_brick_wall\"\r\n\t@JvmField val INFUSED_GLASS    = BlockInfusedGlass(buildInfusedGlass) named \"infused_glass\"\r\n\t@JvmField val VANTABLOCK       = BlockSimple(buildVantablock) named \"vantablock\"\r\n\t@JvmField val ENDIUM_BLOCK     = BlockEndium(buildEndiumBlock) named \"endium_block\"\r\n\t@JvmField val ENDERSOL         = BlockEndersol(buildEnderSol) named \"endersol\"\r\n\t@JvmField val HUMUS            = BlockHumus(buildHumus) named \"humus\"\r\n\t\r\n\t// Blocks: Building (Gloomrock)\r\n\t\r\n\t@JvmField val GLOOMROCK                = BlockGloomrock(buildGloomrock) named \"gloomrock\"\r\n\t@JvmField val GLOOMROCK_BRICKS         = BlockGloomrock(buildGloomrockBricks) named \"gloomrock_bricks\"\r\n\t@JvmField val GLOOMROCK_BRICK_STAIRS   = BlockStairsCustom(GLOOMROCK_BRICKS) named \"gloomrock_brick_stairs\"\r\n\t@JvmField val GLOOMROCK_BRICK_SLAB     = BlockSlabCustom(buildGloomrockBricks) named \"gloomrock_brick_slab\"\r\n\t@JvmField val GLOOMROCK_SMOOTH         = BlockGloomrock(buildGloomrockSmooth) named \"gloomrock_smooth\"\r\n\t@JvmField val GLOOMROCK_SMOOTH_STAIRS  = BlockStairsCustom(GLOOMROCK_SMOOTH) named \"gloomrock_smooth_stairs\"\r\n\t@JvmField val GLOOMROCK_SMOOTH_SLAB    = BlockSlabCustom(buildGloomrockSmooth) named \"gloomrock_smooth_slab\"\r\n\t@JvmField val GLOOMROCK_SMOOTH_RED     = BlockGloomrock(buildGloomrockSmooth) named \"gloomrock_smooth_red\"\r\n\t@JvmField val GLOOMROCK_SMOOTH_ORANGE  = BlockGloomrock(buildGloomrockSmooth) named \"gloomrock_smooth_orange\"\r\n\t@JvmField val GLOOMROCK_SMOOTH_YELLOW  = BlockGloomrock(buildGloomrockSmooth) named \"gloomrock_smooth_yellow\"\r\n\t@JvmField val GLOOMROCK_SMOOTH_GREEN   = BlockGloomrock(buildGloomrockSmooth) named \"gloomrock_smooth_green\"\r\n\t@JvmField val GLOOMROCK_SMOOTH_CYAN    = BlockGloomrock(buildGloomrockSmooth) named \"gloomrock_smooth_cyan\"\r\n\t@JvmField val GLOOMROCK_SMOOTH_BLUE    = BlockGloomrock(buildGloomrockSmooth) named \"gloomrock_smooth_blue\"\r\n\t@JvmField val GLOOMROCK_SMOOTH_PURPLE  = BlockGloomrock(buildGloomrockSmooth) named \"gloomrock_smooth_purple\"\r\n\t@JvmField val GLOOMROCK_SMOOTH_MAGENTA = BlockGloomrock(buildGloomrockSmooth) named \"gloomrock_smooth_magenta\"\r\n\t@JvmField val GLOOMROCK_SMOOTH_WHITE   = BlockGloomrock(buildGloomrockSmooth) named \"gloomrock_smooth_white\"\r\n\t@JvmField val GLOOMTORCH               = BlockGloomtorch(buildGloomtorch) named \"gloomtorch\"\r\n\t\r\n\t// Blocks: Building (Dusty Stone)\r\n\t\r\n\t@JvmField val DUSTY_STONE                = BlockDustyStoneUnstable(buildDustyStone) named \"dusty_stone\"\r\n\t@JvmField val DUSTY_STONE_CRACKED        = BlockDustyStoneUnstable(buildDustyStoneCracked) named \"dusty_stone_cracked\"\r\n\t@JvmField val DUSTY_STONE_DAMAGED        = BlockDustyStoneUnstable(buildDustyStoneDamaged) named \"dusty_stone_damaged\"\r\n\t@JvmField val DUSTY_STONE_BRICKS         = BlockDustyStoneBricks(buildDustyStoneBricks) named \"dusty_stone_bricks\"\r\n\t@JvmField val DUSTY_STONE_CRACKED_BRICKS = BlockDustyStoneBricks(buildDustyStoneBricks) named \"dusty_stone_cracked_bricks\"\r\n\t@JvmField val DUSTY_STONE_DECORATION     = BlockDustyStoneBricks(buildDustyStoneBricks) named \"dusty_stone_decoration\"\r\n\t@JvmField val DUSTY_STONE_BRICK_STAIRS   = BlockStairsCustom(DUSTY_STONE_BRICKS) named \"dusty_stone_brick_stairs\"\r\n\t@JvmField val DUSTY_STONE_BRICK_SLAB     = BlockSlabCustom(buildDustyStoneBricks) named \"dusty_stone_brick_slab\"\r\n\t\r\n\t// Blocks: Building (Obsidian)\r\n\t\r\n\t@JvmField val OBSIDIAN_STAIRS       = BlockStairsCustom(Blocks.OBSIDIAN) named \"obsidian_stairs\"\r\n\t@JvmField val OBSIDIAN_FALLING      = BlockFallingObsidian(buildObsidian) named \"obsidian_falling\"\r\n\t@JvmField val OBSIDIAN_SMOOTH       = BlockSimple(buildObsidianVariation) named \"obsidian_smooth\"\r\n\t@JvmField val OBSIDIAN_CHISELED     = BlockSimple(buildObsidianVariation) named \"obsidian_chiseled\"\r\n\t@JvmField val OBSIDIAN_PILLAR       = BlockPillarCustom(buildObsidianVariation) named \"obsidian_pillar\"\r\n\t@JvmField val OBSIDIAN_SMOOTH_LIT   = BlockSimple(buildObsidianVariationLit) named \"obsidian_smooth_lit\"\r\n\t@JvmField val OBSIDIAN_CHISELED_LIT = BlockSimple(buildObsidianVariationLit) named \"obsidian_chiseled_lit\"\r\n\t@JvmField val OBSIDIAN_PILLAR_LIT   = BlockPillarCustom(buildObsidianVariationLit) named \"obsidian_pillar_lit\"\r\n\t\r\n\t// Blocks: Building (End Stone)\r\n\t\r\n\t@JvmField val END_STONE_INFESTED  = BlockSimpleWithMapColor(buildEndStone, MaterialColor.RED) named \"end_stone_infested\"\r\n\t@JvmField val END_STONE_BURNED    = BlockSimpleWithMapColor(buildEndStone, MaterialColor.ADOBE /* RENAME ORANGE */) named \"end_stone_burned\"\r\n\t@JvmField val END_STONE_ENCHANTED = BlockSimpleWithMapColor(buildEndStone, MaterialColor.PURPLE) named \"end_stone_enchanted\"\r\n\t\r\n\t// Blocks: Building (Dark Loam)\r\n\t\r\n\t@JvmField val DARK_LOAM      = BlockSimple(buildDarkLoam) named \"dark_loam\"\r\n\t@JvmField val DARK_LOAM_SLAB = BlockSlabCustom(buildDarkLoam) named \"dark_loam_slab\"\r\n\t\r\n\t// Blocks: Building (Grave Dirt)\r\n\t\r\n\t@JvmField val GRAVE_DIRT_PLAIN      = BlockGraveDirt(buildGraveDirt) named \"grave_dirt\"\r\n\t@JvmField val GRAVE_DIRT_LOOT       = BlockGraveDirt(buildGraveDirt) named \"grave_dirt_loot\"\r\n\t@JvmField val GRAVE_DIRT_SPIDERLING = BlockGraveDirt.Spiderling(buildGraveDirt) named \"grave_dirt_spiderling\"\r\n\t\r\n\t// Blocks: Building (Wood)\r\n\t\r\n\t@JvmField val WHITEBARK_LOG    = BlockWhitebarkLog(buildWhitebark) named \"whitebark_log\"\r\n\t@JvmField val WHITEBARK        = BlockSimple(buildWhitebark) named \"whitebark\"\r\n\t@JvmField val WHITEBARK_PLANKS = BlockSimple(buildWhitebarkPlanks) named \"whitebark_planks\"\r\n\t@JvmField val WHITEBARK_STAIRS = BlockStairsCustom(WHITEBARK_PLANKS) named \"whitebark_stairs\"\r\n\t@JvmField val WHITEBARK_SLAB   = BlockSlabCustom(buildWhitebarkPlanks) named \"whitebark_slab\"\r\n\t\r\n\t// Blocks: Building (Miner's Burial)\r\n\t\r\n\t@JvmField val MINERS_BURIAL_BLOCK_PLAIN    = BlockSimple(buildMinersBurial) named \"miners_burial_block_plain\"\r\n\t@JvmField val MINERS_BURIAL_BLOCK_CHISELED = BlockSimple(buildMinersBurial) named \"miners_burial_block_chiseled\"\r\n\t@JvmField val MINERS_BURIAL_BLOCK_PILLAR   = BlockPillarCustom(buildMinersBurial) named \"miners_burial_block_pillar\"\r\n\t@JvmField val MINERS_BURIAL_BLOCK_JAIL     = BlockSimple(buildMinersBurialIndestructible) named \"miners_burial_block_jail\"\r\n\t@JvmField val MINERS_BURIAL_ALTAR          = BlockMinersBurialAltar(buildMinersBurialIndestructible) named \"miners_burial_altar\"\r\n\t\r\n\t// Blocks: Fluids\r\n\t\r\n\t@JvmField val ENDER_GOO          = BlockEnderGoo() named \"ender_goo\"\r\n\t@JvmField val PURIFIED_ENDER_GOO = BlockEnderGooPurified() named \"purified_ender_goo\"\r\n\t\r\n\t@JvmField val CAULDRON_ENDER_GOO          = BlockCauldronWithGoo(buildCauldron, ENDER_GOO) named \"cauldron_ender_goo\"\r\n\t@JvmField val CAULDRON_PURIFIED_ENDER_GOO = BlockCauldronWithGoo(buildCauldron, PURIFIED_ENDER_GOO) named \"cauldron_purified_ender_goo\"\r\n\t@JvmField val CAULDRON_DRAGONS_BREATH     = BlockCauldronWithDragonsBreath(buildCauldron) named \"cauldron_dragons_breath\"\r\n\t\r\n\t// Blocks: Interactive (Storage)\r\n\t\r\n\t@JvmField val JAR_O_DUST = BlockJarODust(buildJarODust) named \"jar_o_dust\"\r\n\t@JvmField val DARK_CHEST = BlockDarkChest(buildGloomrock) named \"dark_chest\"\r\n\t@JvmField val LOOT_CHEST = BlockLootChest(buildLootChest) named \"loot_chest\"\r\n\t\r\n\t// Blocks: Interactive (Puzzle)\r\n\t\r\n\t@JvmField val PUZZLE_WALL       = BlockSimple(buildPuzzleWall) named \"puzzle_block_wall\"\r\n\t@JvmField val PUZZLE_PLAIN      = BlockPuzzleLogic.Plain(buildPuzzleLogic) named \"puzzle_block_plain\"\r\n\t@JvmField val PUZZLE_BURST_3    = BlockPuzzleLogic.Burst(buildPuzzleLogic, radius = 1) named \"puzzle_block_burst_3\"\r\n\t@JvmField val PUZZLE_BURST_5    = BlockPuzzleLogic.Burst(buildPuzzleLogic, radius = 2) named \"puzzle_block_burst_5\"\r\n\t@JvmField val PUZZLE_REDIRECT_1 = BlockPuzzleLogic.Redirect(buildPuzzleLogic, arrayOf(NORTH)) named \"puzzle_block_redirect_1\"\r\n\t@JvmField val PUZZLE_REDIRECT_2 = BlockPuzzleLogic.Redirect(buildPuzzleLogic, arrayOf(NORTH, SOUTH)) named \"puzzle_block_redirect_2\"\r\n\t@JvmField val PUZZLE_REDIRECT_4 = BlockPuzzleLogic.RedirectAll(buildPuzzleLogic) named \"puzzle_block_redirect_4\"\r\n\t@JvmField val PUZZLE_TELEPORT   = BlockPuzzleLogic.Teleport(buildPuzzleLogic) named \"puzzle_block_teleport\"\r\n\t\r\n\t// Blocks: Interactive (Gates)\r\n\t\r\n\t@JvmField val EXPERIENCE_GATE            = BlockExperienceGateOutline(buildExperienceGate) named \"experience_gate\"\r\n\t@JvmField val EXPERIENCE_GATE_CONTROLLER = BlockExperienceGateController(buildExperienceGate) named \"experience_gate_controller\"\r\n\t\r\n\t// Blocks: Interactive (Uncategorized)\r\n\t\r\n\t@JvmField val INFUSED_TNT            = BlockInfusedTNT() named \"infused_tnt\"\r\n\t@JvmField val IGNEOUS_PLATE          = BlockIgneousPlate(buildIgneousPlate) named \"igneous_plate\"\r\n\t@JvmField val ENHANCED_BREWING_STAND = BlockBrewingStandCustom(buildBrewingStand) named \"enhanced_brewing_stand\"\r\n\t\r\n\t// Blocks: Ores\r\n\t\r\n\t@JvmField val END_POWDER_ORE   = BlockEndPowderOre(buildEndPowderOre) named \"end_powder_ore\"\r\n\t@JvmField val ENDIUM_ORE       = BlockEndium(buildEndiumOre) named \"endium_ore\"\r\n\t@JvmField val STARDUST_ORE     = BlockStardustOre(buildStardustOre) named \"stardust_ore\"\r\n\t@JvmField val IGNEOUS_ROCK_ORE = BlockIgneousRockOre(buildIgneousRockOre) named \"igneous_rock_ore\"\r\n\t\r\n\t// Blocks: Decorative (Trees)\r\n\t\r\n\t@JvmField val WHITEBARK_SAPLING_AUTUMN_BROWN       = BlockWhitebarkSapling(buildWhitebarkSapling, AutumnTreeGenerator.Brown) named \"autumn_sapling_brown\"\r\n\t@JvmField val WHITEBARK_SAPLING_AUTUMN_ORANGE      = BlockWhitebarkSapling(buildWhitebarkSapling, AutumnTreeGenerator.Orange) named \"autumn_sapling_orange\"\r\n\t@JvmField val WHITEBARK_SAPLING_AUTUMN_YELLOWGREEN = BlockWhitebarkSapling(buildWhitebarkSapling, AutumnTreeGenerator.YellowGreen) named \"autumn_sapling_yellowgreen\"\r\n\t\r\n\t@JvmField val WHITEBARK_LEAVES_AUTUMN_BROWN       = BlockWhitebarkLeaves(buildWhitebarkLeaves, MaterialColor.BROWN_TERRACOTTA) named \"autumn_leaves_brown\"\r\n\t@JvmField val WHITEBARK_LEAVES_AUTUMN_ORANGE      = BlockWhitebarkLeaves(buildWhitebarkLeaves, MaterialColor.ADOBE /* RENAME ORANGE */) named \"autumn_leaves_orange\"\r\n\t@JvmField val WHITEBARK_LEAVES_AUTUMN_YELLOWGREEN = BlockWhitebarkLeaves(buildWhitebarkLeaves, MaterialColor.YELLOW) named \"autumn_leaves_yellowgreen\"\r\n\t\r\n\t@JvmField val POTTED_WHITEBARK_SAPLING_AUTUMN_BROWN       = BlockFlowerPotCustom(buildFlowerPot, WHITEBARK_SAPLING_AUTUMN_BROWN) named \"potted_autumn_sapling_brown\"\r\n\t@JvmField val POTTED_WHITEBARK_SAPLING_AUTUMN_ORANGE      = BlockFlowerPotCustom(buildFlowerPot, WHITEBARK_SAPLING_AUTUMN_ORANGE) named \"potted_autumn_sapling_orange\"\r\n\t@JvmField val POTTED_WHITEBARK_SAPLING_AUTUMN_YELLOWGREEN = BlockFlowerPotCustom(buildFlowerPot, WHITEBARK_SAPLING_AUTUMN_YELLOWGREEN) named \"potted_autumn_sapling_yellowgreen\"\r\n\t\r\n\t// Blocks: Decorative (Plants)\r\n\t\r\n\t@JvmField val DEATH_FLOWER_DECAYING = BlockDeathFlowerDecaying(buildPlant) named \"death_flower\"\r\n\t@JvmField val DEATH_FLOWER_HEALED   = BlockEndPlant(buildPlant) named \"death_flower_healed\"\r\n\t@JvmField val DEATH_FLOWER_WITHERED = BlockEndPlant(buildPlant) named \"death_flower_withered\"\r\n\t\r\n\t@JvmField val POTTED_DEATH_FLOWER_DECAYING = BlockFlowerPotDeathFlowerDecaying(buildFlowerPot, DEATH_FLOWER_DECAYING) named \"potted_death_flower\"\r\n\t@JvmField val POTTED_DEATH_FLOWER_HEALED   = BlockFlowerPotCustom(buildFlowerPot, DEATH_FLOWER_HEALED) named \"potted_death_flower_healed\"\r\n\t@JvmField val POTTED_DEATH_FLOWER_WITHERED = BlockFlowerPotCustom(buildFlowerPot, DEATH_FLOWER_WITHERED) named \"potted_death_flower_withered\"\r\n\t\r\n\t// Blocks: Decorative (Uncategorized)\r\n\t\r\n\t@JvmField val ANCIENT_COBWEB     = BlockAncientCobweb(buildAncientCobweb) named \"ancient_cobweb\"\r\n\t@JvmField val DRY_VINES          = BlockDryVines(buildDryVines) named \"dry_vines\"\r\n\t@JvmField val ENDERMAN_HEAD      = BlockSkullCustom(CustomSkulls.Enderman, buildEndermanHead) named \"enderman_head\"\r\n\t@JvmField val ENDERMAN_WALL_HEAD = BlockSkullCustom.Wall(CustomSkulls.Enderman, buildEndermanHead) named \"enderman_wall_head\"\r\n\t\r\n\t// Blocks: Spawners\r\n\t\r\n\t@JvmField val SPAWNER_OBSIDIAN_TOWERS = BlockSpawnerObsidianTowers(buildSpawnerObsidianTowers) named \"spawner_obsidian_towers\"\r\n\t\r\n\t// Blocks: Portals\r\n\t\r\n\tprivate val portalFrameAABB = AxisAlignedBB(0.0, 0.0, 0.0, 1.0, 0.8125, 1.0)\r\n\t\r\n\t@JvmField val END_PORTAL_INNER    = BlockEndPortalInner(buildPortalInner) named \"end_portal_inner\"\r\n\t@JvmField val END_PORTAL_FRAME    = BlockSimpleShaped(buildPortalFrame, portalFrameAABB) named \"end_portal_frame\"\r\n\t@JvmField val END_PORTAL_ACCEPTOR = BlockEndPortalAcceptor(buildPortalFrame, portalFrameAABB) named \"end_portal_acceptor\"\r\n\t\r\n\t@JvmField val VOID_PORTAL_INNER   = BlockVoidPortalInner(buildPortalInner) named \"void_portal_inner\"\r\n\t@JvmField val VOID_PORTAL_FRAME   = BlockSimpleShaped(buildPortalFrame, portalFrameAABB) named \"void_portal_frame\"\r\n\t@JvmField val VOID_PORTAL_STORAGE = BlockVoidPortalStorage(buildPortalFrame, portalFrameAABB) named \"void_portal_storage\"\r\n\t\r\n\t@JvmField val VOID_PORTAL_FRAME_CRAFTED   = BlockVoidPortalCrafted(buildPortalFrameCrafted, portalFrameAABB) named \"void_portal_frame_crafted\"\r\n\t@JvmField val VOID_PORTAL_STORAGE_CRAFTED = BlockVoidPortalStorageCrafted(buildPortalFrameCrafted, portalFrameAABB) named \"void_portal_storage_crafted\"\r\n\t\r\n\t// Blocks: Energy\r\n\t\r\n\t@JvmField val ENERGY_CLUSTER   = BlockEnergyCluster(buildEnergyCluster) named \"energy_cluster\"\r\n\t@JvmField val CORRUPTED_ENERGY = BlockCorruptedEnergy(buildCorruptedEnergy) named \"corrupted_energy\"\r\n\t\r\n\t// Blocks: Tables\r\n\t\r\n\t@JvmField val TABLE_PEDESTAL            = BlockTablePedestal(buildTablePedestal) named \"table_pedestal\"\r\n\t@JvmField val TABLE_BASE_TIER_1         = BlockTableBase(buildTable, tier = 1, firstTier = 1) named \"table_base_tier_1\"\r\n\t@JvmField val TABLE_BASE_TIER_2         = BlockTableBase(buildTable, tier = 2, firstTier = 1) named \"table_base_tier_2\"\r\n\t@JvmField val TABLE_BASE_TIER_3         = BlockTableBase(buildTable, tier = 3, firstTier = 1) named \"table_base_tier_3\"\r\n\t@JvmField val ACCUMULATION_TABLE_TIER_1 = BlockTableTile(buildTable, \"accumulation_table\", TileEntityAccumulationTable::class.java, tier = 1, firstTier = 1) named \"accumulation_table_tier_1\"\r\n\t@JvmField val ACCUMULATION_TABLE_TIER_2 = BlockTableTile(buildTable, \"accumulation_table\", TileEntityAccumulationTable::class.java, tier = 2, firstTier = 1) named \"accumulation_table_tier_2\"\r\n\t@JvmField val ACCUMULATION_TABLE_TIER_3 = BlockTableTile(buildTable, \"accumulation_table\", TileEntityAccumulationTable::class.java, tier = 3, firstTier = 1) named \"accumulation_table_tier_3\"\r\n\t@JvmField val EXPERIENCE_TABLE_TIER_1   = BlockTableTile(buildTable, \"experience_table\", TileEntityExperienceTable::class.java, tier = 1, firstTier = 1) named \"experience_table_tier_1\"\r\n\t@JvmField val EXPERIENCE_TABLE_TIER_2   = BlockTableTile(buildTable, \"experience_table\", TileEntityExperienceTable::class.java, tier = 2, firstTier = 1) named \"experience_table_tier_2\"\r\n\t@JvmField val EXPERIENCE_TABLE_TIER_3   = BlockTableTile(buildTable, \"experience_table\", TileEntityExperienceTable::class.java, tier = 3, firstTier = 1) named \"experience_table_tier_3\"\r\n\t@JvmField val INFUSION_TABLE_TIER_1     = BlockTableTile(buildTable, \"infusion_table\", TileEntityInfusionTable::class.java, tier = 1, firstTier = 1) named \"infusion_table_tier_1\"\r\n\t@JvmField val INFUSION_TABLE_TIER_2     = BlockTableTile(buildTable, \"infusion_table\", TileEntityInfusionTable::class.java, tier = 2, firstTier = 1) named \"infusion_table_tier_2\"\r\n\t@JvmField val INFUSION_TABLE_TIER_3     = BlockTableTile(buildTable, \"infusion_table\", TileEntityInfusionTable::class.java, tier = 3, firstTier = 1) named \"infusion_table_tier_3\"\r\n\t\r\n\t// Blocks: Utilities\r\n\t\r\n\t@JvmField val ETERNAL_FIRE = BlockEternalFire(buildEternalFire) named \"eternal_fire\"\r\n\t@JvmField val SCAFFOLDING  = BlockScaffolding(buildScaffolding) named \"scaffolding\"\r\n\t\r\n\t// Registry\r\n\t\r\n\tprivate val itemBlockBaseProps\r\n\t\tget() = Item.Properties().group(ModCreativeTabs.main)\r\n\t\r\n\tprivate val itemBlockDefaultProps = itemBlockBaseProps\r\n\tprivate val itemBlockPropsHidden = Item.Properties()\r\n\t\r\n\tprivate val basicItemBlock = { block: Block -> ItemBlock(block, itemBlockDefaultProps) }\r\n\tprivate val hiddenItemBlock = { block: Block -> ItemBlock(block, itemBlockPropsHidden) }\r\n\t\r\n\tprivate fun fuelItemBlock(burnTicks: Int): (Block) -> ItemBlock{\r\n\t\treturn { block -> ItemBlockFuel(block, itemBlockDefaultProps, burnTicks) }\r\n\t}\r\n\t\r\n\t@SubscribeEvent\r\n\tfun onRegisterFluids(e: RegistryEvent.Register<Fluid>){\r\n\t\twith(e.registry){\r\n\t\t\tregister(FluidEnderGoo.still)\r\n\t\t\tregister(FluidEnderGoo.flowing)\r\n\t\t\tregister(FluidEnderGooPurified.still)\r\n\t\t\tregister(FluidEnderGooPurified.flowing)\r\n\t\t}\r\n\t}\r\n\t\r\n\t@SubscribeEvent\r\n\tfun onRegisterBlocks(e: RegistryEvent.Register<Block>){\r\n\t\twith(e.registry){\r\n\t\t\tregister(ETHEREAL_LANTERN with basicItemBlock)\r\n\t\t\tregister(STONE_BRICK_WALL with basicItemBlock)\r\n\t\t\tregister(INFUSED_GLASS with basicItemBlock)\r\n\t\t\tregister(VANTABLOCK with basicItemBlock)\r\n\t\t\tregister(ENDIUM_BLOCK with basicItemBlock)\r\n\t\t\tregister(ENDERSOL with basicItemBlock)\r\n\t\t\tregister(HUMUS with basicItemBlock)\r\n\t\t\t\r\n\t\t\tregister(GLOOMROCK with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_BRICKS with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_BRICK_STAIRS with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_BRICK_SLAB with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_SMOOTH with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_SMOOTH_STAIRS with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_SMOOTH_SLAB with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_SMOOTH_RED with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_SMOOTH_ORANGE with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_SMOOTH_YELLOW with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_SMOOTH_GREEN with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_SMOOTH_CYAN with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_SMOOTH_BLUE with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_SMOOTH_PURPLE with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_SMOOTH_MAGENTA with basicItemBlock)\r\n\t\t\tregister(GLOOMROCK_SMOOTH_WHITE with basicItemBlock)\r\n\t\t\tregister(GLOOMTORCH with basicItemBlock)\r\n\t\t\t\r\n\t\t\tregister(DUSTY_STONE with basicItemBlock)\r\n\t\t\tregister(DUSTY_STONE_CRACKED with basicItemBlock)\r\n\t\t\tregister(DUSTY_STONE_DAMAGED with basicItemBlock)\r\n\t\t\tregister(DUSTY_STONE_BRICKS with basicItemBlock)\r\n\t\t\tregister(DUSTY_STONE_CRACKED_BRICKS with basicItemBlock)\r\n\t\t\tregister(DUSTY_STONE_DECORATION with basicItemBlock)\r\n\t\t\tregister(DUSTY_STONE_BRICK_STAIRS with basicItemBlock)\r\n\t\t\tregister(DUSTY_STONE_BRICK_SLAB with basicItemBlock)\r\n\t\t\t\r\n\t\t\tregister(OBSIDIAN_STAIRS with basicItemBlock)\r\n\t\t\tregister(OBSIDIAN_FALLING with basicItemBlock)\r\n\t\t\tregister(OBSIDIAN_SMOOTH with basicItemBlock)\r\n\t\t\tregister(OBSIDIAN_CHISELED with basicItemBlock)\r\n\t\t\tregister(OBSIDIAN_PILLAR with basicItemBlock)\r\n\t\t\tregister(OBSIDIAN_SMOOTH_LIT with basicItemBlock)\r\n\t\t\tregister(OBSIDIAN_CHISELED_LIT with basicItemBlock)\r\n\t\t\tregister(OBSIDIAN_PILLAR_LIT with basicItemBlock)\r\n\t\t\t\r\n\t\t\tregister(END_STONE_INFESTED with basicItemBlock)\r\n\t\t\tregister(END_STONE_BURNED with basicItemBlock)\r\n\t\t\tregister(END_STONE_ENCHANTED with basicItemBlock)\r\n\t\t\t\r\n\t\t\tregister(DARK_LOAM with basicItemBlock)\r\n\t\t\tregister(DARK_LOAM_SLAB with basicItemBlock)\r\n\t\t\t\r\n\t\t\tregister(GRAVE_DIRT_PLAIN with basicItemBlock)\r\n\t\t\tregister(GRAVE_DIRT_LOOT with basicItemBlock)\r\n\t\t\tregister(GRAVE_DIRT_SPIDERLING with basicItemBlock)\r\n\t\t\t\r\n\t\t\tregister(WHITEBARK_LOG with basicItemBlock)\r\n\t\t\tregister(WHITEBARK with basicItemBlock)\r\n\t\t\tregister(WHITEBARK_PLANKS with basicItemBlock)\r\n\t\t\tregister(WHITEBARK_STAIRS with basicItemBlock)\r\n\t\t\tregister(WHITEBARK_SLAB with fuelItemBlock(burnTicks = 150))\r\n\t\t\t\r\n\t\t\tregister(MINERS_BURIAL_BLOCK_PLAIN with basicItemBlock)\r\n\t\t\tregister(MINERS_BURIAL_BLOCK_CHISELED with basicItemBlock)\r\n\t\t\tregister(MINERS_BURIAL_BLOCK_PILLAR with basicItemBlock)\r\n\t\t\tregister(MINERS_BURIAL_BLOCK_JAIL with basicItemBlock)\r\n\t\t\tregister(MINERS_BURIAL_ALTAR with basicItemBlock)\r\n\t\t\t\r\n\t\t\tregister(ENDER_GOO)\r\n\t\t\tregister(PURIFIED_ENDER_GOO)\r\n\t\t\tregister(CAULDRON_ENDER_GOO)\r\n\t\t\tregister(CAULDRON_PURIFIED_ENDER_GOO)\r\n\t\t\tregister(CAULDRON_DRAGONS_BREATH)\r\n\t\t\t\r\n\t\t\tregister(JAR_O_DUST with { ItemBlock(it, itemBlockBaseProps.maxStackSize(1).setTEISR { Callable { ModRendering.RENDER_ITEM_JAR_O_DUST } }) })\r\n\t\t\tregister(DARK_CHEST with { ItemBlock(it, itemBlockBaseProps.setTEISR { Callable { ModRendering.RENDER_ITEM_DARK_CHEST } }) })\r\n\t\t\tregister(LOOT_CHEST with { ItemBlock(it, itemBlockBaseProps.setTEISR { Callable { ModRendering.RENDER_ITEM_LOOT_CHEST } }) })\r\n\t\t\t\r\n\t\t\tregister(PUZZLE_WALL with basicItemBlock)\r\n\t\t\tregister(PUZZLE_PLAIN with basicItemBlock)\r\n\t\t\tregister(PUZZLE_BURST_3 with basicItemBlock)\r\n\t\t\tregister(PUZZLE_BURST_5 with basicItemBlock)\r\n\t\t\tregister(PUZZLE_REDIRECT_1 with basicItemBlock)\r\n\t\t\tregister(PUZZLE_REDIRECT_2 with basicItemBlock)\r\n\t\t\tregister(PUZZLE_REDIRECT_4 with basicItemBlock)\r\n\t\t\tregister(PUZZLE_TELEPORT with basicItemBlock)\r\n\t\t\t\r\n\t\t\tregister(INFUSED_TNT with ItemInfusedTNT(INFUSED_TNT, itemBlockPropsHidden))\r\n\t\t\tregister(IGNEOUS_PLATE with basicItemBlock)\r\n\t\t\tregister(ENHANCED_BREWING_STAND with basicItemBlock)\r\n\t\t\tregister(EXPERIENCE_GATE with basicItemBlock)\r\n\t\t\tregister(EXPERIENCE_GATE_CONTROLLER)\r\n\t\t\t\r\n\t\t\tregister(END_POWDER_ORE with basicItemBlock)\r\n\t\t\tregister(ENDIUM_ORE with basicItemBlock)\r\n\t\t\tregister(STARDUST_ORE with basicItemBlock)\r\n\t\t\tregister(IGNEOUS_ROCK_ORE with basicItemBlock)\r\n\t\t\t\r\n\t\t\tregister(WHITEBARK_LEAVES_AUTUMN_BROWN with basicItemBlock)\r\n\t\t\tregister(WHITEBARK_LEAVES_AUTUMN_ORANGE with basicItemBlock)\r\n\t\t\tregister(WHITEBARK_LEAVES_AUTUMN_YELLOWGREEN with basicItemBlock)\r\n\t\t\tregister(WHITEBARK_SAPLING_AUTUMN_BROWN with fuelItemBlock(burnTicks = 100))\r\n\t\t\tregister(WHITEBARK_SAPLING_AUTUMN_ORANGE with fuelItemBlock(burnTicks = 100))\r\n\t\t\tregister(WHITEBARK_SAPLING_AUTUMN_YELLOWGREEN with fuelItemBlock(burnTicks = 100))\r\n\t\t\tregister(POTTED_WHITEBARK_SAPLING_AUTUMN_BROWN)\r\n\t\t\tregister(POTTED_WHITEBARK_SAPLING_AUTUMN_ORANGE)\r\n\t\t\tregister(POTTED_WHITEBARK_SAPLING_AUTUMN_YELLOWGREEN)\r\n\t\t\t\r\n\t\t\tregister(DEATH_FLOWER_DECAYING with { ItemDeathFlower(it, itemBlockDefaultProps) })\r\n\t\t\tregister(DEATH_FLOWER_HEALED with basicItemBlock)\r\n\t\t\tregister(DEATH_FLOWER_WITHERED with basicItemBlock)\r\n\t\t\tregister(POTTED_DEATH_FLOWER_DECAYING)\r\n\t\t\tregister(POTTED_DEATH_FLOWER_HEALED)\r\n\t\t\tregister(POTTED_DEATH_FLOWER_WITHERED)\r\n\t\t\t\r\n\t\t\tregister(ANCIENT_COBWEB with { ItemAncientCobweb(it, itemBlockDefaultProps) })\r\n\t\t\tregister(DRY_VINES with basicItemBlock)\r\n\t\t\tregister(ENDERMAN_HEAD)\r\n\t\t\t\r\n\t\t\tregister(SPAWNER_OBSIDIAN_TOWERS)\r\n\t\t\t\r\n\t\t\tregister(END_PORTAL_INNER)\r\n\t\t\tregister(END_PORTAL_FRAME with basicItemBlock)\r\n\t\t\tregister(END_PORTAL_ACCEPTOR with basicItemBlock)\r\n\t\t\tregister(VOID_PORTAL_INNER)\r\n\t\t\tregister(VOID_PORTAL_FRAME with basicItemBlock)\r\n\t\t\tregister(VOID_PORTAL_STORAGE with basicItemBlock)\r\n\t\t\tregister(VOID_PORTAL_FRAME_CRAFTED with hiddenItemBlock)\r\n\t\t\tregister(VOID_PORTAL_STORAGE_CRAFTED with hiddenItemBlock)\r\n\t\t\t\r\n\t\t\tregister(ENERGY_CLUSTER with basicItemBlock)\r\n\t\t\tregister(CORRUPTED_ENERGY)\r\n\t\t\t\r\n\t\t\tregister(TABLE_PEDESTAL with basicItemBlock)\r\n\t\t\tregister(TABLE_BASE_TIER_1 with basicItemBlock)\r\n\t\t\tregister(TABLE_BASE_TIER_2 with basicItemBlock)\r\n\t\t\tregister(TABLE_BASE_TIER_3 with basicItemBlock)\r\n\t\t\tregister(ACCUMULATION_TABLE_TIER_1 with basicItemBlock)\r\n\t\t\tregister(ACCUMULATION_TABLE_TIER_2 with basicItemBlock)\r\n\t\t\tregister(ACCUMULATION_TABLE_TIER_3 with basicItemBlock)\r\n\t\t\tregister(EXPERIENCE_TABLE_TIER_1 with basicItemBlock)\r\n\t\t\tregister(EXPERIENCE_TABLE_TIER_2 with basicItemBlock)\r\n\t\t\tregister(EXPERIENCE_TABLE_TIER_3 with basicItemBlock)\r\n\t\t\tregister(INFUSION_TABLE_TIER_1 with basicItemBlock)\r\n\t\t\tregister(INFUSION_TABLE_TIER_2 with basicItemBlock)\r\n\t\t\tregister(INFUSION_TABLE_TIER_3 with basicItemBlock)\r\n\t\t\t\r\n\t\t\tregister(ETERNAL_FIRE)\r\n\t\t\tregister(SCAFFOLDING with basicItemBlock)\r\n\t\t}\r\n\t\t\r\n\t\t// vanilla modifications\r\n\t\t\r\n\t\twith(e.registry){\r\n\t\t\tregister(BlockEndPortalOverride(buildEndPortalOverride).apply { override(Blocks.END_PORTAL){ null } })\r\n\t\t\tregister(BlockBrewingStandCustom(buildBrewingStand).apply { override(Blocks.BREWING_STAND){ ItemBlock(it, Item.Properties().group(ItemGroup.BREWING)) } })\r\n\t\t\tregister(BlockDragonEggOverride(buildDragonEgg).apply { override(Blocks.DRAGON_EGG){ ItemDragonEgg(it, itemBlockDefaultProps) } })\r\n\t\t\t\r\n\t\t\tfor(block in BlockShulkerBoxOverride.ALL_BLOCKS){\r\n\t\t\t\tregister(BlockShulkerBoxOverride(Block.Properties.from(block), block.color).apply {\r\n\t\t\t\t\toverride(block){ ItemShulkerBoxOverride(it, Item.Properties().maxStackSize(1).group(ItemGroup.DECORATIONS)) }\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t@SubscribeEvent\r\n\tfun onRegisterItemBlocks(e: RegistryEvent.Register<Item>){\r\n\t\ttemporaryItemBlocks.forEach(e.registry::register)\r\n\t\ttemporaryItemBlocks.clear()\r\n\t\t\r\n\t\t// fire\r\n\t\t\r\n\t\twith(Blocks.FIRE as BlockFire){\r\n\t\t\tsetFireInfo(WHITEBARK_LOG, 5, 5)\r\n\t\t\tsetFireInfo(WHITEBARK, 5, 5)\r\n\t\t\tsetFireInfo(WHITEBARK_PLANKS, 5, 20)\r\n\t\t\tsetFireInfo(WHITEBARK_STAIRS, 5, 20)\r\n\t\t\tsetFireInfo(WHITEBARK_SLAB, 5, 20)\r\n\t\t\t\r\n\t\t\tsetFireInfo(WHITEBARK_LEAVES_AUTUMN_BROWN, 30, 60)\r\n\t\t\tsetFireInfo(WHITEBARK_LEAVES_AUTUMN_ORANGE, 30, 60)\r\n\t\t\tsetFireInfo(WHITEBARK_LEAVES_AUTUMN_YELLOWGREEN, 30, 60)\r\n\t\t\t\r\n\t\t\tsetFireInfo(INFUSED_TNT, 15, 100)\r\n\t\t\t\r\n\t\t\tsetFireInfo(ANCIENT_COBWEB, 100, 300)\r\n\t\t\tsetFireInfo(DRY_VINES, 100, 300)\r\n\t\t}\r\n\t\t\r\n\t\t// vanilla modifications\r\n\t\t\r\n\t\tBlocks.END_PORTAL_FRAME.asItem().group = null\r\n\t}\r\n\t\r\n\t// Utilities\r\n\t\r\n\tprivate val temporaryItemBlocks = mutableListOf<ItemBlock>()\r\n\t\r\n\tprivate inline fun Block.override(vanillaBlock: Block, itemBlockConstructor: ((Block) -> ItemBlock?)){\r\n\t\tthis.useVanillaName(vanillaBlock)\r\n\t\titemBlockConstructor(this)?.let { with(it) }\r\n\t}\r\n\t\r\n\tprivate infix fun Block.with(itemBlock: ItemBlock) = apply {\r\n\t\tif (Resource.isVanilla(this.registryName!!)){\r\n\t\t\titemBlock.useVanillaName(this)\r\n\t\t}\r\n\t\telse{\r\n\t\t\titemBlock.registryName = this.registryName\r\n\t\t}\r\n\t\t\r\n\t\ttemporaryItemBlocks.add(itemBlock)\r\n\t\t(itemBlock.group as? OrderedCreativeTab)?.registerOrder(itemBlock)\r\n\t}\r\n\t\r\n\tprivate infix fun <T : Block> T.with(itemBlockConstructor: (T) -> ItemBlock): Block{\r\n\t\treturn with(itemBlockConstructor(this))\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/chylex/hee/init/ModBlocks.kt	(revision dc6be9f9dc3746b81524e00124222d742935d811)
+++ src/main/java/chylex/hee/init/ModBlocks.kt	(date 1590248233903)
@@ -545,7 +545,7 @@
 			
 			for(block in BlockShulkerBoxOverride.ALL_BLOCKS){
 				register(BlockShulkerBoxOverride(Block.Properties.from(block), block.color).apply {
-					override(block){ ItemShulkerBoxOverride(it, Item.Properties().maxStackSize(1).group(ItemGroup.DECORATIONS)) }
+					override(block){ ItemShulkerBoxOverride(it, Item.Properties().maxStackSize(1).group(ItemGroup.DECORATIONS).setTEISR { Callable { ModRendering.RENDER_ITEM_SHULKER_BOX } }) }
 				})
 			}
 		}
Index: src/main/java/chylex/hee/init/ModRendering.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package chylex.hee.init\r\nimport chylex.hee.HEE\r\nimport chylex.hee.client.gui.GuiAmuletOfRecovery\r\nimport chylex.hee.client.gui.GuiBrewingStandCustom\r\nimport chylex.hee.client.gui.GuiLootChest\r\nimport chylex.hee.client.gui.GuiPortalTokenStorage\r\nimport chylex.hee.client.gui.GuiShulkerBox\r\nimport chylex.hee.client.gui.GuiTrinketPouch\r\nimport chylex.hee.client.render.block.RenderTileDarkChest\r\nimport chylex.hee.client.render.block.RenderTileEndPortal\r\nimport chylex.hee.client.render.block.RenderTileExperienceGate\r\nimport chylex.hee.client.render.block.RenderTileIgneousPlate\r\nimport chylex.hee.client.render.block.RenderTileJarODust\r\nimport chylex.hee.client.render.block.RenderTileLootChest\r\nimport chylex.hee.client.render.block.RenderTileMinersBurialAltar\r\nimport chylex.hee.client.render.block.RenderTileSpawner\r\nimport chylex.hee.client.render.block.RenderTileTable\r\nimport chylex.hee.client.render.block.RenderTileTablePedestal\r\nimport chylex.hee.client.render.block.RenderTileVoidPortal\r\nimport chylex.hee.client.render.entity.RenderEntityBossEnderEye\r\nimport chylex.hee.client.render.entity.RenderEntityItemNoBob\r\nimport chylex.hee.client.render.entity.RenderEntityMobAbstractEnderman\r\nimport chylex.hee.client.render.entity.RenderEntityMobAngryEnderman\r\nimport chylex.hee.client.render.entity.RenderEntityMobSpiderling\r\nimport chylex.hee.client.render.entity.RenderEntityMobUndread\r\nimport chylex.hee.client.render.entity.RenderEntityMobVampireBat\r\nimport chylex.hee.client.render.entity.RenderEntityMobVillagerDying\r\nimport chylex.hee.client.render.entity.RenderEntityNothing\r\nimport chylex.hee.client.render.entity.RenderEntityProjectileEyeOfEnder\r\nimport chylex.hee.client.render.entity.RenderEntityTokenHolder\r\nimport chylex.hee.client.render.util.asItem\r\nimport chylex.hee.game.block.BlockDryVines\r\nimport chylex.hee.game.block.BlockPuzzleLogic\r\nimport chylex.hee.game.block.BlockTablePedestal\r\nimport chylex.hee.game.block.entity.TileEntityDarkChest\r\nimport chylex.hee.game.block.entity.TileEntityExperienceGate\r\nimport chylex.hee.game.block.entity.TileEntityIgneousPlate\r\nimport chylex.hee.game.block.entity.TileEntityJarODust\r\nimport chylex.hee.game.block.entity.TileEntityLootChest\r\nimport chylex.hee.game.block.entity.TileEntityMinersBurialAltar\r\nimport chylex.hee.game.block.entity.TileEntityPortalInner\r\nimport chylex.hee.game.block.entity.TileEntityTablePedestal\r\nimport chylex.hee.game.block.entity.base.TileEntityBaseSpawner\r\nimport chylex.hee.game.block.entity.base.TileEntityBaseTable\r\nimport chylex.hee.game.block.util.CustomSkulls\r\nimport chylex.hee.game.container.ContainerAmuletOfRecovery\r\nimport chylex.hee.game.container.ContainerLootChest\r\nimport chylex.hee.game.container.ContainerPortalTokenStorage\r\nimport chylex.hee.game.container.ContainerShulkerBox\r\nimport chylex.hee.game.container.ContainerTrinketPouch\r\nimport chylex.hee.game.entity.item.EntityItemNoBob\r\nimport chylex.hee.game.entity.item.EntityTokenHolder\r\nimport chylex.hee.game.entity.living.EntityBossEnderEye\r\nimport chylex.hee.game.entity.living.EntityMobAbstractEnderman\r\nimport chylex.hee.game.entity.living.EntityMobAngryEnderman\r\nimport chylex.hee.game.entity.living.EntityMobSpiderling\r\nimport chylex.hee.game.entity.living.EntityMobUndread\r\nimport chylex.hee.game.entity.living.EntityMobVampireBat\r\nimport chylex.hee.game.entity.living.EntityMobVillagerDying\r\nimport chylex.hee.game.entity.projectile.EntityProjectileEyeOfEnder\r\nimport chylex.hee.game.entity.projectile.EntityProjectileSpatialDash\r\nimport chylex.hee.game.entity.technical.EntityTechnicalBase\r\nimport chylex.hee.game.item.ItemBindingEssence\r\nimport chylex.hee.game.item.ItemEnergyOracle\r\nimport chylex.hee.game.item.ItemEnergyReceptacle\r\nimport chylex.hee.game.item.ItemPortalToken\r\nimport chylex.hee.game.item.ItemVoidBucket\r\nimport chylex.hee.init.factory.RendererConstructors\r\nimport chylex.hee.init.factory.ScreenConstructors\r\nimport chylex.hee.system.migration.forge.Side\r\nimport chylex.hee.system.migration.forge.SubscribeAllEvents\r\nimport chylex.hee.system.migration.forge.SubscribeEvent\r\nimport chylex.hee.system.migration.vanilla.ContainerBrewingStand\r\nimport chylex.hee.system.util.facades.Resource\r\nimport net.minecraft.client.gui.ScreenManager\r\nimport net.minecraft.client.gui.screen.inventory.ContainerScreen\r\nimport net.minecraft.client.renderer.entity.EntityRenderer\r\nimport net.minecraft.client.renderer.entity.model.GenericHeadModel\r\nimport net.minecraft.client.renderer.tileentity.SkullTileEntityRenderer\r\nimport net.minecraft.client.renderer.tileentity.TileEntityRenderer\r\nimport net.minecraft.entity.Entity\r\nimport net.minecraft.inventory.container.Container\r\nimport net.minecraft.inventory.container.ContainerType\r\nimport net.minecraft.tileentity.TileEntity\r\nimport net.minecraftforge.client.event.ColorHandlerEvent\r\nimport net.minecraftforge.fml.client.registry.ClientRegistry\r\nimport net.minecraftforge.fml.client.registry.RenderingRegistry\r\nimport net.minecraftforge.fml.common.Mod.EventBusSubscriber.Bus.MOD\r\nimport net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent\r\n\r\n@SubscribeAllEvents(Side.CLIENT, modid = HEE.ID, bus = MOD)\r\nobject ModRendering{\r\n\tval RENDER_ITEM_DARK_CHEST = RenderTileDarkChest.AsItem\r\n\tval RENDER_ITEM_JAR_O_DUST = RenderTileJarODust.AsItem\r\n\tval RENDER_ITEM_LOOT_CHEST = RenderTileLootChest.AsItem\r\n\t\r\n\t@SubscribeEvent\r\n\t@Suppress(\"unused\", \"UNUSED_PARAMETER\", \"RemoveExplicitTypeArguments\")\r\n\tfun onRegisterRenderers(e: FMLClientSetupEvent){\r\n\t\t\r\n\t\t// screens\r\n\t\t\r\n\t\tregisterScreen<GuiAmuletOfRecovery, ContainerAmuletOfRecovery>(ModContainers.AMULET_OF_RECOVERY)\r\n\t\tregisterScreen<GuiBrewingStandCustom, ContainerBrewingStand>(ModContainers.BREWING_STAND)\r\n\t\tregisterScreen<GuiLootChest, ContainerLootChest>(ModContainers.LOOT_CHEST)\r\n\t\tregisterScreen<GuiPortalTokenStorage, ContainerPortalTokenStorage>(ModContainers.PORTAL_TOKEN_STORAGE)\r\n\t\tregisterScreen<GuiShulkerBox, ContainerShulkerBox>(ModContainers.SHULKER_BOX)\r\n\t\tregisterScreen<GuiShulkerBox, ContainerShulkerBox>(ModContainers.SHULKER_BOX_IN_INVENTORY)\r\n\t\tregisterScreen<GuiTrinketPouch, ContainerTrinketPouch>(ModContainers.TRINKET_POUCH)\r\n\t\t\r\n\t\t// entities\r\n\t\t\r\n\t\tregisterEntity<EntityItemNoBob, RenderEntityItemNoBob>()\r\n\t\tregisterEntity<EntityTokenHolder, RenderEntityTokenHolder>()\r\n\t\t\r\n\t\tregisterEntity<EntityBossEnderEye, RenderEntityBossEnderEye>()\r\n\t\t\r\n\t\tregisterEntity<EntityMobAbstractEnderman, RenderEntityMobAbstractEnderman>()\r\n\t\tregisterEntity<EntityMobAngryEnderman, RenderEntityMobAngryEnderman>()\r\n\t\tregisterEntity<EntityMobSpiderling, RenderEntityMobSpiderling>()\r\n\t\tregisterEntity<EntityMobUndread, RenderEntityMobUndread>()\r\n\t\tregisterEntity<EntityMobVampireBat, RenderEntityMobVampireBat>()\r\n\t\tregisterEntity<EntityMobVillagerDying, RenderEntityMobVillagerDying>()\r\n\t\t\r\n\t\tregisterEntity<EntityProjectileEyeOfEnder, RenderEntityProjectileEyeOfEnder>()\r\n\t\tregisterEntity<EntityProjectileSpatialDash, RenderEntityNothing>()\r\n\t\t\r\n\t\tregisterEntity<EntityTechnicalBase, RenderEntityNothing>()\r\n\t\t\r\n\t\t// tile entities\r\n\t\t\r\n\t\tregisterTile<TileEntityBaseSpawner>(RenderTileSpawner)\r\n\t\tregisterTile<TileEntityBaseTable>(RenderTileTable)\r\n\t\tregisterTile<TileEntityDarkChest>(RenderTileDarkChest)\r\n\t\tregisterTile<TileEntityExperienceGate>(RenderTileExperienceGate)\r\n\t\tregisterTile<TileEntityIgneousPlate>(RenderTileIgneousPlate)\r\n\t\tregisterTile<TileEntityJarODust>(RenderTileJarODust)\r\n\t\tregisterTile<TileEntityLootChest>(RenderTileLootChest)\r\n\t\tregisterTile<TileEntityMinersBurialAltar>(RenderTileMinersBurialAltar)\r\n\t\tregisterTile<TileEntityPortalInner.End>(RenderTileEndPortal)\r\n\t\tregisterTile<TileEntityPortalInner.Void>(RenderTileVoidPortal)\r\n\t\tregisterTile<TileEntityTablePedestal>(RenderTileTablePedestal)\r\n\t\t\r\n\t\t// miscellaneous\r\n\t\t\r\n\t\tSkullTileEntityRenderer.MODELS[CustomSkulls.Enderman] = GenericHeadModel(0, 0, 64, 32)\r\n\t\tSkullTileEntityRenderer.SKINS[CustomSkulls.Enderman] = Resource.Custom(\"textures/entity/enderman_head.png\")\r\n\t}\r\n\t\r\n\t@SubscribeEvent\r\n\tfun onRegisterBlockItemColors(e: ColorHandlerEvent.Item){\r\n\t\twith(e.blockColors){ with(e.itemColors){\r\n\t\t\tregister(BlockDryVines.Color, ModBlocks.DRY_VINES)\r\n\t\t\tregister(BlockDryVines.Color.asItem(ModBlocks.DRY_VINES), ModBlocks.DRY_VINES)\r\n\t\t\tregister(BlockTablePedestal.Color, ModBlocks.TABLE_PEDESTAL)\r\n\t\t\t\r\n\t\t\tregister(ItemBindingEssence.Color, ModItems.BINDING_ESSENCE)\r\n\t\t\tregister(ItemEnergyOracle.Color, ModItems.ENERGY_ORACLE)\r\n\t\t\tregister(ItemEnergyReceptacle.Color, ModItems.ENERGY_RECEPTACLE)\r\n\t\t\tregister(ItemPortalToken.Color, ModItems.PORTAL_TOKEN)\r\n\t\t\tregister(ItemVoidBucket.Color, ModItems.VOID_BUCKET)\r\n\t\t\t\r\n\t\t\tfor(block in arrayOf(\r\n\t\t\t\tModBlocks.PUZZLE_BURST_3,\r\n\t\t\t\tModBlocks.PUZZLE_BURST_5,\r\n\t\t\t\tModBlocks.PUZZLE_REDIRECT_1,\r\n\t\t\t\tModBlocks.PUZZLE_REDIRECT_2,\r\n\t\t\t\tModBlocks.PUZZLE_REDIRECT_4,\r\n\t\t\t\tModBlocks.PUZZLE_TELEPORT\r\n\t\t\t)){\r\n\t\t\t\tregister(BlockPuzzleLogic.Color, block)\r\n\t\t\t\tregister(BlockPuzzleLogic.Color.asItem(block), block)\r\n\t\t\t}\r\n\t\t}}\r\n\t}\r\n\t\r\n\t// Utilities\r\n\t\r\n\tprivate inline fun <reified T : ContainerScreen<U>, U : Container> registerScreen(type: ContainerType<out U>){\r\n\t\tScreenManager.registerFactory(type, ScreenConstructors.get(T::class.java))\r\n\t}\r\n\t\r\n\tprivate inline fun <reified T : Entity, reified U : EntityRenderer<in T>> registerEntity(){\r\n\t\tRenderingRegistry.registerEntityRenderingHandler(T::class.java, RendererConstructors.get(U::class.java))\r\n\t}\r\n\t\r\n\tprivate inline fun <reified T : TileEntity> registerTile(renderer: TileEntityRenderer<in T>){\r\n\t\tClientRegistry.bindTileEntitySpecialRenderer(T::class.java, renderer)\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/chylex/hee/init/ModRendering.kt	(revision dc6be9f9dc3746b81524e00124222d742935d811)
+++ src/main/java/chylex/hee/init/ModRendering.kt	(date 1590244005698)
@@ -13,6 +13,7 @@
 import chylex.hee.client.render.block.RenderTileJarODust
 import chylex.hee.client.render.block.RenderTileLootChest
 import chylex.hee.client.render.block.RenderTileMinersBurialAltar
+import chylex.hee.client.render.block.RenderTileShulkerBoxInHand
 import chylex.hee.client.render.block.RenderTileSpawner
 import chylex.hee.client.render.block.RenderTileTable
 import chylex.hee.client.render.block.RenderTileTablePedestal
@@ -93,6 +94,7 @@
 	val RENDER_ITEM_DARK_CHEST = RenderTileDarkChest.AsItem
 	val RENDER_ITEM_JAR_O_DUST = RenderTileJarODust.AsItem
 	val RENDER_ITEM_LOOT_CHEST = RenderTileLootChest.AsItem
+	val RENDER_ITEM_SHULKER_BOX = RenderTileShulkerBoxInHand
 	
 	@SubscribeEvent
 	@Suppress("unused", "UNUSED_PARAMETER", "RemoveExplicitTypeArguments")
